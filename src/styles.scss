// Custom Theming for Angular Material: https://material.angular.io/guide/theming
@use "@angular/material" as mat;
@use "./styles.theme" as styles;

@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$hungry-horde-ui-primary: mat.define-palette(mat.$indigo-palette, 400);
$hungry-horde-ui-accent: mat.define-palette(mat.$teal-palette, A200, A100, A400);
$hungry-horde-ui-warn: mat.define-palette(mat.$red-palette);
$hungry-horde-ui-frames: mat.define-palette(mat.$teal-palette, 600);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$hungry-horde-ui-theme: mat.define-dark-theme(
  (
    color: (
      primary: $hungry-horde-ui-primary,
      accent: $hungry-horde-ui-accent,
      warn: $hungry-horde-ui-warn
    ),
    typography: mat.define-typography-config(),
    density: -1
  )
);

// Use https://github.dev/angular/components/blob/master/src/material/core/theming/_theming.scss for
// getting the palette names for application UI elements

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.

@include mat.core-theme($hungry-horde-ui-theme);
@include mat.sidenav-theme($hungry-horde-ui-theme);
@include mat.toolbar-theme($hungry-horde-ui-theme);
@include mat.card-theme($hungry-horde-ui-theme);
@include mat.table-theme($hungry-horde-ui-theme);
@include mat.progress-bar-theme($hungry-horde-ui-theme);
@include mat.progress-spinner-theme($hungry-horde-ui-theme);
@include mat.button-theme($hungry-horde-ui-theme);
@include mat.slide-toggle-theme($hungry-horde-ui-theme);
@include mat.menu-theme($hungry-horde-ui-theme);
@include mat.icon-button-theme($hungry-horde-ui-theme);
@include mat.icon-theme($hungry-horde-ui-theme);
@include mat.snack-bar-theme($hungry-horde-ui-theme);
@include mat.form-field-theme($hungry-horde-ui-theme);
@include mat.input-theme($hungry-horde-ui-theme);
@include mat.autocomplete-theme($hungry-horde-ui-theme);
@include styles.theme($hungry-horde-ui-theme);

html,
body {
  height: 100%;
}
body {
  margin: 0;

  &.mat-typography {
    font:
      400 14px / 20px "Segoe UI",
      Roboto,
      Helvetica,
      Arial,
      sans-serif,
      "Apple Color Emoji",
      "Segoe UI Emoji",
      "Segoe UI Symbol";
    box-sizing: border-box;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
}

/** Layouts **/

.app-l-flex {
  display: flex;
}

.app-l-inline-flex {
  display: inline-flex;
}

.app-l-flex-spacer-1 {
  flex-grow: 1;
}

.app-l-flex-column {
  flex-direction: column;
}

.app-l-flex-row {
  flex-direction: row;
}

.app-l-align-start {
  align-items: flex-start;
}

.app-l-align-center {
  align-items: center;
}

.app-l-justify-start {
  justify-content: flex-start;
}

.app-l-justify-center {
  justify-content: center;
}

/** Spacing **/

$spacing: (
  0: 0,
  hr: 0.5rem,
  1r: 1rem,
  2r: 2rem
);
$directions: (
  l: left,
  t: top,
  r: right,
  b: bottom
);

@mixin spacing($prop, $short) {
  @each $space-name, $space in $spacing {
    .app-#{$short}-#{$space-name} {
      #{$prop}: $space !important;
    }
    @each $dir-name, $dir in $directions {
      .app-#{$short}#{$dir-name}-#{$space-name} {
        #{$prop}-#{$dir}: $space !important;
      }
    }
  }
}

@mixin flex-gap() {
  @each $space-name, $space in $spacing {
    .app-l-flex-gap-#{$space-name} {
      gap: $space !important;
    }
  }
}

@include flex-gap();
@include spacing(padding, p);
@include spacing(margin, m);

/** Sizes **/

$sizes: (
  10: 10%,
  20: 20%,
  30: 30%,
  33: 30.3%,
  40: 40%,
  50: 50%,
  60: 60%,
  66: 66.6%,
  70: 70%,
  80: 80%,
  90: 90%,
  100: 100%
);

@mixin sizes($prop) {
  @each $size-name, $size in $sizes {
    .app-#{$prop}-#{$size-name} {
      #{$prop}: $size !important;
    }
  }
}

@include sizes(width);
@include sizes(height);

/** Style upgrades **/
a[mat-link] {
  color: white;
  text-decoration: none;

  &:visited {
    color: lightgrey;
  }
}

/** FIXES **/
.mat-content.mat-content-hide-toggle {
  overflow: visible;
}

.mat-mdc-menu-panel {
  max-height: 50vh;
}

/** Global App styles **/

img.mat-img {
  display: inline-block;
  fill: currentColor;
  height: 30px;
  width: 30px;
  overflow: visible;
}

/** NwDb Items **/

:root {
  --rarity-0: 200, 200, 200;
  --rarity-1: 7, 192, 47;
  --rarity-2: 0, 203, 233;
  --rarity-3: 255, 22, 247;
  --rarity-4: 247, 162, 45;
  --rarity-5: 200, 200, 200;
  --rarity-100: 233, 93, 93;
  --color-rarity-0: rgb(var(--rarity-0));
  --color-rarity-1: rgb(var(--rarity-1));
  --color-rarity-2: rgb(var(--rarity-2));
  --color-rarity-3: rgb(var(--rarity-3));
  --color-rarity-4: rgb(var(--rarity-4));
  --color-rarity-5: rgb(var(--rarity-5));
  --color-rarity-100: rgb(var(--rarity-100));
  --color-text-primary: #d4cfc4;
  --color-background-primary: hsl(0, 0%, 12%);
  --color-background-secondary: hsl(0, 0%, 7%);
  --color-background-third: hsl(0, 0%, 10%);
  --border-primary: none;
  --border-radius-primary: 0.25rem;
}

$rarities: (0, 1, 2, 3, 4, 5, 100);

@mixin rarities() {
  @each $rarity in $rarities {
    .item-tier-#{$rarity} {
      background: linear-gradient(360deg, rgba(var(--rarity-#{$rarity}), 0.5) 0, rgba(0, 0, 0, 0.5) 100%);
      border: 1px solid var(--color-rarity-#{$rarity});
    }
  }
}

@include rarities();
